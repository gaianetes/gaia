---
# Source: bitwarden/charts/smtp/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "release-name-smtp-test-connection"
  labels:
    helm.sh/chart: smtp-0.1.0
    app.kubernetes.io/name: smtp
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['release-name-smtp:80']
  restartPolicy: Never

---
# Source: bitwarden/charts/postgresql/templates/primary/svc.yaml


apiVersion: v1
kind: Service
metadata:
  name: release-name-postgresql
  namespace: "bidwarden"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.1.0
    helm.sh/chart: postgresql-13.2.25
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary

---
# Source: bitwarden/charts/smtp/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-smtp
  labels:
    helm.sh/chart: smtp-0.1.0
    app.kubernetes.io/name: smtp
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
automountServiceAccountToken: true

---
# Source: bitwarden/charts/smtp/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-smtp
  labels:
    helm.sh/chart: smtp-0.1.0
    app.kubernetes.io/name: smtp
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: smtp
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        helm.sh/chart: smtp-0.1.0
        app.kubernetes.io/name: smtp
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/version: "1.16.0"
        app.kubernetes.io/managed-by: Helm
    spec:
      serviceAccountName: release-name-smtp
      securityContext:
        {}
      containers:
        - name: smtp
          securityContext:
            {}
          image: "bytemark/smtp:1.16.0"
          imagePullPolicy: IfNotPresent
          env:
          
            map[map[MAILNAME:smtp.smigula.io RELAY_HOST:smtp.sendgrid.com RELAY_PASSWORD:SuperSecret RELAY_PORT:587 RELAY_USERNAME:mitch.murphy@gmail.com]:map[]]
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            {}

---
# Source: bitwarden/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-bitwarden
  labels:
    app.kubernetes.io/name: bitwarden
    helm.sh/chart: bitwarden-0.1.7
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: bitwarden
    app.kubernetes.io/instance: release-name

---
# Source: bitwarden/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-bitwarden
  labels:
    app.kubernetes.io/name: bitwarden
    helm.sh/chart: bitwarden-0.1.7
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: bitwarden
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: bitwarden
        app.kubernetes.io/instance: release-name
      annotations:
    spec:
      containers:
        - name: bitwarden
          image: "vaultwarden/server:1.30.1"
          imagePullPolicy: IfNotPresent
          resources:
            {}
          env:
            - name: INVITATIONS_ALLOWED
              value: "true"
            - name: INVITATION_ORG_NAME
              value: "SmigWarden"
            - name: PUSH_ENABLED
              value: "true"
            - name: PUSH_INSTALLATION_ID
              value: "0b416aa5-d219-4214-a17f-b0e301435b6e"
            - name: PUSH_INSTALLATION_KEY
              value: "rLs9F2DZXv2ccRejQ0zp"
            - name: SENDS_ALLOWED
              value: "true"
            - name: SIGNUPS_ALLOWED
              value: "true"
            - name: SIGNUPS_VERIFY
              value: "true"
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          volumeMounts:
          - name: data
            mountPath: /data
      volumes:
      - name: data
        emptyDir: {}

---
# Source: bitwarden/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: release-name-bitwarden
  labels:
    app.kubernetes.io/name: bitwarden
    helm.sh/chart: bitwarden-0.1.7
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
  annotations:
    kubernetes.io/ingress.class: nginx
    kubernetes.io/tls-acme: "true"
spec:
  tls:
    - hosts:
        - "bitwarden.smigula.io"
      secretName: bitwarden-tls
  rules:
    - host: "bitwarden.smigula.io"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: release-name-bitwarden
                port:
                  number: 80

---
# Source: bitwarden/charts/postgresql/templates/secrets.yaml

apiVersion: v1
kind: Secret
metadata:
  name: release-name-postgresql
  namespace: "bidwarden"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.1.0
    helm.sh/chart: postgresql-13.2.25
type: Opaque
data:
  postgres-password: "WUR3S2FtZVBxQw=="
  password: "Qml0d2FyZGVuUEA1NQ=="
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords

---
# Source: bitwarden/charts/postgresql/templates/primary/statefulset.yaml

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-postgresql
  namespace: "bidwarden"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.1.0
    helm.sh/chart: postgresql-13.2.25
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  serviceName: release-name-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: release-name-postgresql
      labels:
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/version: 16.1.0
        helm.sh/chart: postgresql-13.2.25
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: release-name
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      hostIPC: false
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:16.1.0-debian-11-r16
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_USER
              value: "bitwarden"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: password
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: postgres-password
            - name: POSTGRES_DATABASE
              value: "bitwarden"
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "bitwarden" -d "dbname=bitwarden" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "bitwarden" -d "dbname=bitwarden" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
        

---
# Source: bitwarden/charts/smtp/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: { { include "smtp.fullname" . } }
  labels: { { - include "smtp.labels" . | nindent 4 } }
  type: { { .Values.service.type } }
  ports:
    - port: { { .Values.service.port } }
      targetPort: http
      protocol: TCP
      name: http
  selector: { { - include "smtp.selectorLabels" . | nindent 4 } }

---
# Source: bitwarden/charts/postgresql/templates/primary/svc-headless.yaml


apiVersion: v1
kind: Service
metadata:
  name: release-name-postgresql-hl
  namespace: "bidwarden"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.1.0
    helm.sh/chart: postgresql-13.2.25
    app.kubernetes.io/component: primary
  annotations:
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
