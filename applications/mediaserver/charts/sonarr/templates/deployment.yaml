apiVersion: apps/v1
kind: Deployment
metadata:
  name: sonarr
  labels:
    {{- include "mediaserver.labels" . | nindent 4 }}
spec:
  strategy:
    type: Recreate
  replicas: 1
  selector:
    matchLabels:
      {{- include "mediaserver.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "mediaserver.selectorLabels" . | nindent 8 }}
        app: sonarr
    spec:
      initContainers:
        - name: config-sonarr
          image: docker.io/ubuntu:groovy
          command: ["/init-sonarr/init-sonarr.sh"]
          volumeMounts:
            - mountPath: /init-sonarr
              name: init-files-sonarr
          {{- if .Values.global.sonarr.volume }}
            - name: {{ .Values.global.sonarr.volume.name }}
              mountPath: /sonarr-config
          {{- else }}
            - name: mediaserver-volume
              mountPath: /sonarr-config
              subPath: "{{ .Values.global.general.storage.subPaths.config }}/sonarr"
          {{- end }}
          securityContext:
            runAsUser: {{ .Values.global.general.puid }}
            runAsGroup: {{ .Values.global.general.pgid }}
      containers:
        - name: {{ .Chart.Name }}
          envFrom:
            - configMapRef:
                name: sonarr-config
          image: "{{ .Values.global.sonarr.container.image }}:{{ .Values.global.sonarr.container.tag | default .Values.global.general.image_tag }}"
          imagePullPolicy: Always
          readinessProbe:
            httpGet:
              path: "{{ .Values.global.sonarr.ingress.path }}/ping"
              port: {{ .Values.global.sonarr.container.port }}
            initialDelaySeconds: 10
            periodSeconds: 20
          ports:
            - name: sonarr-port
              containerPort: {{ .Values.global.sonarr.container.port }}
              protocol: TCP
          volumeMounts:
          {{- if .Values.global.sonarr.volume }}
            - name: {{ .Values.global.sonarr.volume.name }}
              mountPath: /config
          {{- else }}
            - name: mediaserver-volume
              mountPath: "/config"
              subPath: "{{ .Values.global.general.storage.subPaths.config }}/sonarr"
          {{- end }}
            - name: mediaserver-volume
              mountPath: "/downloads"
              subPath: "{{ .Values.global.general.storage.subPaths.downloads }}"
            - name: mediaserver-volume
              mountPath: "/tv"
              subPath: "{{ .Values.global.general.storage.subPaths.tv }}"
          {{- with .Values.global.sonarr.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
      volumes:
        {{- if not .Values.global.general.storage.customVolume }}
        - name: mediaserver-volume
          persistentVolumeClaim:
            claimName: {{ .Values.global.general.storage.pvcName }}
        {{- else }}
        - name: mediaserver-volume
          {{- toYaml .Values.global.general.storage.volumes | nindent 10 }}
        {{- end }}
        {{- if .Values.global.sonarr.volume }}
        - name: {{ .Values.global.sonarr.volume.name }}
          persistentVolumeClaim:
            claimName: {{ .Values.global.sonarr.volume.name }}
        {{- end }}
        - name: init-files-sonarr
          configMap:
            defaultMode: 493
            name: init-sonarr-cm
      {{- with merge .Values.global.sonarr.container.nodeSelector .Values.global.general.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if eq .Values.global.general.podDistribution "cluster" }}
      affinity:
        podAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/instance
                  operator: In
                  values:
                  - {{ .Release.Name }}
              topologyKey: "kubernetes.io/hostname"
            weight: 100
      {{- else if eq .Values.global.general.podDistribution "spread" }}
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: "kubernetes.io/hostname"
        whenUnsatisfiable: "ScheduleAnyway"
        labelSelector:
          matchLabels:
            app.kubernetes.io/instance: {{ .Release.Name }}
      {{- end }}